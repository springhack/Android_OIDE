# 920 Text Editor syntax file ==========================================
#
# Modified by: Jecelyin (www.jecelyin.com)
# If you optimize it better, please share it to: jecelyin@gmail.com
#
# Reference from VIM syntax file.
# ======================================================================

# Vim syntax file
# Language:	C#
# Maintainer:	Anduin Withers <awithers@anduin.com>
# Former Maintainer:	Johannes Zellner <johannes@zellner.org>
# Last Change:	Sun Apr 30 19:26:18 PDT 2006
# Filenames:	*.cs
# $Id: cs.vim,v 1.4 2006/05/03 21:20:02 vimboss Exp $

# REFERENCES:
# [1] ECMA TC39: C# Language Specification (WD13Oct01.doc)


# type
syn keyword csType			bool byte char decimal double float int long object sbyte short string uint ulong ushort void
# storage
syn keyword csStorage			class delegate enum interface namespace struct
# repeat / condition / label
syn keyword csRepeat			break continue do for foreach goto return while
syn keyword csConditional		else if switch
syn keyword csLabel			case default
# modifier
syn keyword csModifier			abstract const extern internal override private protected public readonly sealed static virtual volatile
# constant
syn keyword csConstant			false null true
# exception
syn keyword csException			try catch finally throw

# TODO:
syn keyword csUnspecifiedStatement	as base checked event fixed in is lock new operator out params ref sizeof stackalloc this typeof unchecked unsafe using
# TODO:
syn keyword csUnsupportedStatement	add remove value
# TODO:
syn keyword csUnspecifiedKeyword	explicit implicit
# TODO:暂时先简单地匹配为关键字，不做region处理
syn keyword csContextualStatement       yield return break partial class struct interface get set where

# Contextual Keywords
#syn region csContextualStatement    start="yield\s+" end="return"
#syn region csContextualStatement    start="yield\s+" end="break"
#syn region csContextualStatement    start="partial\s+" end="class"
#syn region csContextualStatement    start="partial\s+" end="struct"
#syn region csContextualStatement    start="partial\s+" end="interface"
#syn region csContextualStatement    start="get" end="\s" matchend="{"
#syn region csContextualStatement    start="set" end="\s" matchend="{"
#syn region csContextualStatement    start="where" end="\s" matchend=":"

# Comments

# PROVIDES: @csCommentHook

# TODO: include strings ?

syn region  csComment		start="/*"  end="*/"
syn region  csComment		start="//"  end="$"

# xml markup inside '///' comments
#syn keyword csXmlTag		contained Libraries Packages Types Excluded ExcludedTypeName ExcludedLibraryName
#syn keyword csXmlTag		contained ExcludedBucketName TypeExcluded Type TypeKind TypeSignature AssemblyInfo
#syn keyword csXmlTag		contained AssemblyName AssemblyPublicKey AssemblyVersion AssemblyCulture Base
#syn keyword csXmlTag		contained BaseTypeName Interfaces Interface InterfaceName Attributes Attribute
#syn keyword csXmlTag		contained AttributeName Members Member MemberSignature MemberType MemberValue
#syn keyword csXmlTag		contained ReturnValue ReturnType Parameters Parameter MemberOfPackage
#syn keyword csXmlTag		contained ThreadingSafetyStatement Docs devdoc example overload remarks returns summary
#syn keyword csXmlTag		contained threadsafe value internalonly nodoc exception param permission platnote
#syn keyword csXmlTag		contained seealso b c i pre sub sup block code note paramref see subscript superscript
#syn keyword csXmlTag		contained list listheader item term description altcompliant altmember

#syn match   csXmlCommentLeader	+\/\/\/+    contained
#syn match   csXmlComment	+\/\/\/.*$+ contains=csXmlCommentLeader,@csXml


# [1] 9.5 Pre-processing directives
#syn region	csPreCondit
#    \ start="^\s*#\s*\(define\|undef\|if\|elif\|else\|endif\|line\|error\|warning\)"
#    \ skip="\\$" end="$" contains=csComment keepend
#syn region	csRegion matchgroup=csPreCondit start="^\s*#\s*region.*$"
#    \ end="^\s*#\s*endregion" transparent fold contains=TOP
syn region  cPreCondit  start="^\s*#\s*if" end="\s"
syn region  cPreCondit  start="^\s*#\s*elif" end="\s"
syn region  cPreCondit  start="^\s*#\s*else" end="\s"
syn region  cPreCondit  start="^\s*#\s*endif" end="\s"
syn region  cDefine start="^\s*#\s*define" end="\s"
syn region  cDefine start="^\s*#\s*undef" end="\s"
syn region  cPreProc start="^\s*#\s*line" end="\s"
syn region  cPreProc start="^\s*#\s*warning" end="\s"
syn region  cPreProc start="^\s*#\s*error" end="\s"
syn region  cPreProc start="^\s*#\s*region" end="\s"
syn region  cPreProc start="^\s*#\s*endregion" end="\s"
syn region  cPreProc start="^\s*#\s*pragma warning" end="\s"
syn region  cPreProc start="^\s*#\s*pragma checksum" end="\s"
syn region  cPreProc start="^\s*#\s*pragma" end="\s"

# unicode characters
syn region  csString		start=+"+  skip=+\\|\"+ end=+"+

# The default highlighting.
HiLink csType			Keyword
HiLink csStorage			Keyword
HiLink csRepeat			Keyword
HiLink csConditional		Keyword
HiLink csLabel			Keyword
HiLink csModifier			Keyword
HiLink csConstant			Keyword
HiLink csException			Keyword
HiLink csUnspecifiedStatement	Keyword
HiLink csUnsupportedStatement	Keyword
HiLink csUnspecifiedKeyword	Keyword
HiLink csContextualStatement	Keyword
HiLink csComment			Comment
HiLink csString			String

HiLink cPreCondit	Keyword
HiLink cDefine	Keyword
HiLink cPreProc	Keyword

# xml markup
# vim: ts=8